.\"
.\" Copyright (c) 2016, 2019 Tobias Kortkamp <t@tobik.me>
.\"
.\" Permission to use, copy, modify, and/or distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
.\" SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd July 24, 2019
.Dt SIMPLESTROKE 1
.Os
.Sh NAME
.Nm simplestroke
.Nd "detect mouse gestures"
.Sh SYNOPSIS
.Nm
.Sh DESCRIPTION
.Nm
detects mouse gestures.  There are twelve pre-defined mouse gestures
you can choose from.
.Pp
With no arguments
.Nm
starts in gesture detection mode.  Draw your gesture and then confirm by
clicking any mouse button.
.Pp
.Nm
reacts on the release of mouse buttons.  This makes it possible to
start
.Nm
from your window manager while pressing down a mouse button and start
gesture analysis after releasing it.
.Pp
.Nm
prints the name of the detected gesture, if any.  The output can then
be used in a simple shell script to execute commands.
.Sh GESTURES
The following gestures are supported.  The names are derived from the
direction you would draw them in.
.Ss STRAIGHT LINE GESTURES
.Bd -literal
TopDown
DownTop
LeftRight
RightLeft
.Ed
.Ss DIAGONAL GESTURES
.Bd -literal
TopLeftDown
TopRightDown
DownLeftTop
DownRightTop
.Ed
.Ss "Z" GESTURES
.Bd -literal
LeftZ
RightZ
.Ed
.Ss SQUARE GESTURES
.Bd -literal
SquareLeft
SquareRight
.Ed
.Sh EXAMPLES
The following examples assume that
.Pa simplestroke.sh
is the shell script you call
.Nm
from:
.Bd -literal -offset indent
#!/bin/sh
case $(simplestroke) in
    TopDown)
    ;;
    DownTop)
    ;;
    LeftRight)
    ;;
    RightLeft)
    ;;
    TopLeftDown)
    ;;
    TopRightDown)
    ;;
    DownLeftTop)
    ;;
    DownRightTop)
    ;;
    LeftZ)
    ;;
    RightZ)
    ;;
    SquareLeft)
    ;;
    SquareRight)
    ;;
    *)
        exit 1
esac
.Ed
.Pp
Under Xorg to start detection with
.Xr simplestroke-daemon 1
while holding down the 9th
mouse button add this to your
.Pa ~/.xinitrc :
.Bd -literal -offset 2n
simplestroke-daemon -c simplestroke.sh -b 9
.Ed
.Pp
Or when using
.Xr evdev 4
like this:
.Bd -literal -offset 2n
simplestroke-daemon -c simplestroke.sh -b BTN_EXTRA
.Ed
.Pp
When using Sway
.Xr simplestroke-daemon 1
is not needed and starting
.Nm
can be accomplished via
.Pa ~/.config/sway/config :
.Bd -literal -offset 2n
bindsym --whole-window BTN_EXTRA exec simplestroke.sh
.Ed
.Pp
The right BTN_* values can be determined via
.Xr libinput-debug-events 1 .
.Pp
Hold the mouse button and after you are finished drawing your gesture,
release it.
.Sh SEE ALSO
.Xr simplestroke-daemon 1
.Sh AUTHORS
.An Tobias Kortkamp Aq Mt t@tobik.me
.Pp
.Nm
is inspired and based on \fBeasystroke\fP 0.6.0 written by Thomas Jaeger
.Aq Lk https://github.com/thjaeger/easystroke .
